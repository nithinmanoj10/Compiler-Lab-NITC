
type
    bst{
        int a;
        bst left;
        bst right;
    }

    linkedList{
        int num;
        str name;
        linkedList next;
    }

    markList{
        str name;  
        linkedList marks;
    }

endtype

decl
    int a, num, *ptr;
    str name, *namePtr;
    int add(int a, int b);
    int *swap(int numOne, int numTwo);
    linkedList insertLL(int val, linkedList head);
    
    linkedList marks;
enddecl

int add(int a, int b) {
    decl
        int addTemp;
    enddecl

    begin
        write("Addd");
        return a+b;
    end;
}

int main() {
    decl
        int temp, num, x;
        str currentName;
        linkedList LLHead;
        int students[5];
        linkedList hashTable[5];
    enddecl

    begin
        write("ex 1");

        x = initialize();

        temp = 0;
        while (temp < 2) do
            hashTable[temp] = alloc();
            read(hashTable[temp].num);
            read(hashTable[temp].name);
            temp = temp + 1;
        endwhile;

        temp = 0;
        while (temp < 2) do
            write(hashTable[temp]);
            write(hashTable[temp].num);
            write(hashTable[temp].name);
            temp = temp + 1;
        endwhile;

        return 1;
    end;
}