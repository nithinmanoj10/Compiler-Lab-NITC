// C Program to calculate the strength of a user-inputted password
// using 3 processes and shared memory IPC

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <errno.h>

int isAlnum(char letter);
void viewMemorySegment(char* baseAddress);

struct sharedMemoryPos{
   char* baseAddr; 
   int password;
   int lock;
   int alnum;
   int special;
   int result;
}; 

int main(int argc, char* argv[]){

    int shmID;
    key_t key;
    char* sharedMemory;
    int shmSize;
    int forkID[2];
    char password[10];
    struct sharedMemoryPos smPos = {0,0,10,11,12,13};
    char* tempMem;

    key = 90210;
    shmSize = 15;

    // allocating a shared memory segment
    shmID = shmget(key, shmSize, IPC_CREAT | 0666);

    if(shmID < 0){
        perror("Error in shmget() ");
        printf("Value of errno : %d\n",errno);
        exit(1);
    }

    // attaching the allocated memory segment to the process
    smPos.baseAddr = shmat(shmID, NULL, 0);

    if(smPos.baseAddr == (char*)-1){
        perror("Error in shmat() ");
        printf("Value of errno : %d\n",errno);
        exit(1);
    }

    // Locking the shared memory for Process 1
    *(smPos.baseAddr + smPos.lock) = 'L';
    forkID[0] = fork();

    // for Process 1
    if(forkID[0] != 0){

        printf("Enter your password: ");
        scanf("%s",password);

        // storing the password in the shared memory
        memcpy(smPos.baseAddr, password, 11);

        // Unlocking the shared memory
        *(smPos.baseAddr + smPos.lock) = 'U';

        wait(forkID[0]);

        forkID[1] = fork();

        // For Process 3
        if(forkID[1] == 0){

            int alnumCount = *(smPos.baseAddr + smPos.alnum);
            int specialCount = *(smPos.baseAddr + smPos.special);

            if(alnumCount >= specialCount)
                *(smPos.baseAddr + smPos.result) = 'w';
            else
                *(smPos.baseAddr + smPos.result) = 's';


        }
        else{
            
            // For Process 1
            wait(forkID[1]);
            
            char result = *(smPos.baseAddr + smPos.result);
            printf("Your password is ");

            if(result == 'w')
                printf("Weak\n\n");
            if(result == 's')
                printf("Strong\n\n");

            if(argc == 2)
                if(strcmp(argv[1], "--viewmem") == 0)
                    viewMemorySegment(smPos.baseAddr);

            // TODO: Detach and destroy the shared memory segment
            shmdt(smPos.baseAddr);
            shmctl(shmID, IPC_RMID, NULL);

        }

    }
    else{

        // For process 2
        // while the Shared Memory if locked
        while(*(smPos.baseAddr + smPos.lock) == 'L'){
            sleep(0.5);
        }

        // finding the number of alnum and special alphabets
        int alnumCount = 0, specialCount = 0;
        tempMem = smPos.baseAddr;

        for(int i = 0; i < 10; ++i){
            if(isAlnum(*tempMem))
                ++alnumCount;
            else
                ++specialCount;
            ++tempMem;
        }
        
       *(smPos.baseAddr + smPos.alnum) = alnumCount + '0';
       *(smPos.baseAddr + smPos.special) = specialCount + '0';

    }

    return(0);
}

int isAlnum(char letter){
    if(((letter >= 97) && (letter <= 122)) || ((letter >= 65) && (letter <= 90)) || ((letter >= 48) && (letter <= 57)))
        return(1);

    return(0);
}


void viewMemorySegment(char* baseAddress){

    printf("\nShared Memory Segment\n\n");

    char* temp = baseAddress;

    for(int i = 0; i < 14; ++i){

        if(i == 0)
            printf("Password\n");
        if(i == 10)
            printf("Shared Memory Lock\n");
        if(i == 11)
            printf("alnumCount and specialCount\n");
        if(i == 13)
            printf("Result\n");

        printf("%d\t%p\t%c\n",i,temp,*temp);

        if(i == 9 || i == 10 || i == 12 || i == 13)
            printf("\n");

        ++temp;
    }
    printf("\n");


}
